# What is the probability of observing the expression of TP53 to be less than q?
q = c(100,500,1000,4000,4500)
# The function sapply() is used to calculate and store the predicted (a) and real (b) values
model_mat = sapply(q,function(x) {
a = pnorm(q=x, mean =m.tp53, sd = s.tp53)
b = sum(tp53.exp$TP53_expression < x)/nrow(tp53.exp)
return(c(a,b))
})
quantile(tp53.exp$TP53_expression,
probs = c(0.1, 0.9))
# Model and measured data and predicted versus measured 0.1 and 0.9 quantiles:
plot(density(tp53.exp$TP53_expression), main ="", xlim=c(-1500, 6000),lwd=3);lines(x,d.pred, col="red",lwd=3);abline(v=quantile(tp53.exp$TP53_expression, probs = c(0.1, 0.9)));abline(v= c(qnorm(p = 0.1, mean = m.tp53, sd = s.tp53), qnorm(p = 0.9, mean = m.tp53, sd = s.tp53)),lty=3,lwd=2,col='red')
qnorm(p = 0.9, mean = m.tp53, sd = s.tp53)
geom_vline(xintercept = qnorm(p = 0.9, mean = m.tp53, sd = s.tp53)))
# Model and measured data and predicted versus measured 0.1 and 0.9 quantiles:
ggplot(tp53.exp,
aes(x = TP53_expression)) +
geom_density() +
geom_vline(xintercept = qnorm(p = 0.1, mean = m.tp53, sd = s.tp53)) +
geom_vline(xintercept = qnorm(p = 0.9, mean = m.tp53, sd = s.tp53))
plot(density(tp53.exp$รง), main ="", xlim=c(-1500, 6000),lwd=3);lines(x,d.pred, col="red",lwd=3);abline(v=quantile(tp53.exp$TP53_expression, probs = c(0.1, 0.9)));abline(v= c(qnorm(p = 0.1, mean = m.tp53, sd = s.tp53), qnorm(p = 0.9, mean = m.tp53, sd = s.tp53)),lty=3,lwd=2,col='red')
plot(density(tp53.exp$รง), main ="", xlim=c(-1500, 6000),lwd=3);lines(x,d.pred, col="red",lwd=3);abline(v=quantile(tp53.exp$TP53_expression, probs = c(0.1, 0.9)));abline(v= c(qnorm(p = 0.1, mean = m.tp53, sd = s.tp53), qnorm(p = 0.9, mean = m.tp53, sd = s.tp53)),lty=3,lwd=2,col='red')
# Model prediction:
x = seq(0,5000,by=5)
d.pred = dnorm(x,mean = m.tp53, sd = s.tp53)
plot(density(tp53.exp$TP53_expression), main ="", xlim=c(-1500, 6000),lwd=3);lines(x,d.pred, col="red",lwd=3);abline(v=quantile(tp53.exp$TP53_expression, probs = c(0.1, 0.9)));abline(v= c(qnorm(p = 0.1, mean = m.tp53, sd = s.tp53), qnorm(p = 0.9, mean = m.tp53, sd = s.tp53)),lty=3,lwd=2,col='red')
quantile(tp53.exp$TP53_expression, probs = c(0.1, 0.9))
# Model and measured data and predicted versus measured 0.1 and 0.9 quantiles:
ggplot(tp53.exp,
aes(x = TP53_expression)) +
geom_density() +
geom_vline(xintercept = c(quantile(tp53.exp$TP53_expression, probs = c(0.1, 0.9)))) +
geom_vline(xintercept = qnorm(p = 0.1, mean = m.tp53, sd = s.tp53),
colour = 'red') +
geom_vline(xintercept = qnorm(p = 0.9, mean = m.tp53, sd = s.tp53))
# Model and measured data and predicted versus measured 0.1 and 0.9 quantiles:
ggplot(tp53.exp,
aes(x = TP53_expression)) +
geom_density() +
geom_vline(xintercept = c(quantile(tp53.exp$TP53_expression, probs = c(0.1, 0.9)))) +
geom_vline(xintercept = c(qnorm(p = 0.1, mean = m.tp53, sd = s.tp53),
qnorm(p = 0.9, mean = m.tp53, sd = s.tp53)),
colour = 'red', linetype = 'dotted')
# Now plot both, predicted and measured data
tp53.exp %>%
ggplot(aes(x = TP53_expression)) +
geom_density() +
geom_line(aes(x = x,
y = d.pred),
inherit.aes = F)
# Now plot both, predicted and measured data
tp53.exp %>%
ggplot(aes(x = TP53_expression)) +
geom_density() +
geom_line(aes(x = x,
y = d.pred))
# Now plot both, predicted and measured data
tp53.exp %>%
ggplot(aes(x = TP53_expression)) +
geom_density() +
ggplot() +
geom_line(aes(x = x,
y = d.pred))
x
# Model and measured data and predicted versus measured 0.1 and 0.9 quantiles:
ggplot(tp53.exp,
aes(x = TP53_expression)) +
geom_density() +
geom_point(aes(x=x,
y = d.pred))
# Model and measured data and predicted versus measured 0.1 and 0.9 quantiles:
ggplot(tp53.exp,
aes(x = TP53_expression)) +
geom_density() +
geom_point(aes(x=x,
y = d.pred)) +
geom_vline(xintercept = c(quantile(tp53.exp$TP53_expression, probs = c(0.1, 0.9)))) +
geom_vline(xintercept = c(qnorm(p = 0.1, mean = m.tp53, sd = s.tp53),
qnorm(p = 0.9, mean = m.tp53, sd = s.tp53)),
colour = 'red', linetype = 'dotted')
# Model and measured data and predicted versus measured 0.1 and 0.9 quantiles:
ggplot(tp53.exp,
aes(x = TP53_expression)) +
geom_density() +
geom_vline(xintercept = c(quantile(tp53.exp$TP53_expression, probs = c(0.1, 0.9)))) +
geom_vline(xintercept = c(qnorm(p = 0.1, mean = m.tp53, sd = s.tp53),
qnorm(p = 0.9, mean = m.tp53, sd = s.tp53)),
colour = 'red', linetype = 'dotted')
# Model and measured data and predicted versus measured 0.1 and 0.9 quantiles:
ggplot() +
geom_density(tp53.exp, aes(x = TP53_expression)) +
geom_vline(xintercept = c(quantile(tp53.exp$TP53_expression, probs = c(0.1, 0.9)))) +
geom_vline(xintercept = c(qnorm(p = 0.1, mean = m.tp53, sd = s.tp53),
qnorm(p = 0.9, mean = m.tp53, sd = s.tp53)),
colour = 'red', linetype = 'dotted')
# Model and measured data and predicted versus measured 0.1 and 0.9 quantiles:
ggplot() +
geom_density(aes(x = tp53.exp$TP53_expression)) +
geom_vline(xintercept = c(quantile(tp53.exp$TP53_expression, probs = c(0.1, 0.9)))) +
geom_vline(xintercept = c(qnorm(p = 0.1, mean = m.tp53, sd = s.tp53),
qnorm(p = 0.9, mean = m.tp53, sd = s.tp53)),
colour = 'red', linetype = 'dotted')
# Model and measured data and predicted versus measured 0.1 and 0.9 quantiles:
ggplot() +
geom_density(aes(x = x,
y = d.pred)) +
geom_line(aes(x = tp53.exp$TP53_expression)) +
geom_vline(xintercept = c(quantile(tp53.exp$TP53_expression, probs = c(0.1, 0.9)))) +
geom_vline(xintercept = c(qnorm(p = 0.1, mean = m.tp53, sd = s.tp53),
qnorm(p = 0.9, mean = m.tp53, sd = s.tp53)),
colour = 'red', linetype = 'dotted')
# Model and measured data and predicted versus measured 0.1 and 0.9 quantiles:
ggplot() +
geom_density(aes(x = tp53.exp$TP53_expression)) +
geom_line(aes(x = x,
y = d.pred)) +
geom_vline(xintercept = c(quantile(tp53.exp$TP53_expression, probs = c(0.1, 0.9)))) +
geom_vline(xintercept = c(qnorm(p = 0.1, mean = m.tp53, sd = s.tp53),
qnorm(p = 0.9, mean = m.tp53, sd = s.tp53)),
colour = 'red', linetype = 'dotted')
# Model and measured data and predicted versus measured 0.1 and 0.9 quantiles:
ggplot() +
geom_density(aes(x = tp53.exp$TP53_expression)) +
geom_line(aes(x = x,
y = d.pred,
colour = "red")) +
geom_vline(xintercept = c(quantile(tp53.exp$TP53_expression, probs = c(0.1, 0.9)))) +
geom_vline(xintercept = c(qnorm(p = 0.1, mean = m.tp53, sd = s.tp53),
qnorm(p = 0.9, mean = m.tp53, sd = s.tp53)),
colour = 'red', linetype = 'dotted')
# Now plot both, predicted and measured data
ggplot() +
geom_density(aes(x = tp53.exp$TP53_expression)) +
geom_line(aes(x = x,
y = d.pred,
colour = "red")) +
geom_vline(xintercept = c(quantile(tp53.exp$TP53_expression, probs = c(0.1, 0.9)))) +
geom_vline(xintercept = c(qnorm(p = 0.1, mean = m.tp53, sd = s.tp53),
qnorm(p = 0.9, mean = m.tp53, sd = s.tp53)),
colour = 'red', linetype = 'dotted')
# The function sapply() is used to calculate and store the predicted (a) and real (b) values
pred = numeric()
meas = numeric()
for (i in 1:length(q)){
pred[i] = pnorm(q=q[i], mean = m.tp53, sd = s.tp53)
meas[i] = sum(tp53.exp$TP53_expression < q[i])/nrow(tp53.exp)
}
model_mat = data.frame(pred, meas)
model_mat = data.frame(pred, meas, q)
View(model_mat)
# Q1: What is the value of TP53 expression at the 10% quantile?
qnorm(p = 0.1, mean = m.tp53, sd = s.tp53)
# Q2: What is the value of TP53 expression at the 90% quantile?
qnorm(p = 0.9, mean = m.tp53, sd = s.tp53)
quantile(tp53.exp$TP53_expression,
probs = c(0.1, 0.9))
model_mat
# We can also plot this
ggplot(model_mat,
aes(x=pred, y = meas)) +
geom_point()
model_mat
# Model and measured data:
plot(density(tp53.exp$TP53_expression), main ="", xlim=c(-1500, 6000),lwd=3);lines(x,d.pred, col="red",lwd=3)
# Model and measured data and predicted versus measured 0.1 and 0.9 quantiles:
ggplot() +
geom_density(aes(x = tp53.exp$TP53_expression)) +
geom_line(aes(x = x,
y = d.pred),
colour = "red") +
geom_vline(xintercept = c(quantile(tp53.exp$TP53_expression, probs = c(0.1, 0.9)))) +
geom_vline(xintercept = c(qnorm(p = 0.1, mean = m.tp53, sd = s.tp53),
qnorm(p = 0.9, mean = m.tp53, sd = s.tp53)),
colour = 'red', linetype = 'dotted')
# Model and measured data:
plot(density(tp53.exp$TP53_expression), main ="", xlim=c(-1500, 6000),lwd=3);lines(x,d.pred, col="red",lwd=3)
# Model and measured data and predicted versus measured 0.1 and 0.9 quantiles:
ggplot() +
geom_density(aes(x = tp53.exp$TP53_expression)) +
geom_line(aes(x = x,
y = d.pred),
colour = "red")
# Model and measured data and predicted versus measured 0.1 and 0.9 quantiles:
ggplot() +
geom_density(aes(x = tp53.exp$TP53_expression)) +
geom_line(aes(x = x,
y = d.pred),
colour = "red")
# Model and measured data and predicted versus measured 0.1 and 0.9 quantiles:
ggplot() +
geom_line(aes(x = x,
y = d.pred),
colour = "red") +
geom_density(aes(x = tp53.exp$TP53_expression))
q = seq(0,1,0.01) # Creating a vector of quantiles
# Find values corresponding to these quantiles in the real data
q.observed = quantile(tp53.exp$TP53_expression, probs = q)
# Find values corresponding to these quantiles in the theoretical normal distribution
q.theoretical = qnorm(p = q, mean = m.tp53, sd = s.tp53)
# Correlate the above two values
plot(x=q.theoretical, y=q.observed);abline(0,1,lty=1,lwd=2,col='red')
q = seq(0,1,0.01) # Creating a vector of quantiles
# Find values corresponding to these quantiles in the real data
q.observed = quantile(tp53.exp$TP53_expression, probs = q)
# Find values corresponding to these quantiles in the theoretical normal distribution
q.theoretical = qnorm(p = q, mean = m.tp53, sd = s.tp53)
# Correlate the above two values
plot(x=q.theoretical, y=q.observed);abline(0,1,lty=1,lwd=2,col='red')
# Correlate the above two values
ggplot() +
geom_point(aes(x = q.theoretical,
y = q.observed))
plot(x=q.theoretical, y=q.observed);abline(0,1,lty=1,lwd=2,col='red')
# Correlate the above two values
ggplot() +
geom_point(aes(x = q.theoretical,
y = q.observed)) +
geom_abline(intercept = 9)
# Correlate the above two values
ggplot() +
geom_point(aes(x = q.theoretical,
y = q.observed)) +
geom_abline(intercept = 0)
# Correlate the above two values
ggplot() +
geom_point(aes(x = q.theoretical,
y = q.observed)) +
geom_abline(intercept = 0, slope = 1,
size = 2, color = "red") +
plot(x=q.theoretical, y=q.observed);abline(0,1,lty=1,lwd=2,col='red')
# Correlate the above two values
ggplot() +
geom_point(aes(x = q.theoretical,
y = q.observed)) +
geom_abline(intercept = 0, slope = 1,
size = 1, color = "red")
plot(x=q.theoretical, y=q.observed);abline(0,1,lty=1,lwd=2,col='red')
# Correlate the above two values
ggplot() +
geom_point(aes(x = q.theoretical,
y = q.observed)) +
geom_abline(intercept = 0, slope = 1,
size = 1, color = "red")
# Correlate the above two values
ggplot() +
geom_point(aes(x = q.theoretical,
y = q.observed), size = 1) +
geom_abline(intercept = 0, slope = 1,
size = 1, color = "red")
# Correlate the above two values
ggplot(aes(x = q.theoretical,
y = q.observed)) +
geom_point(size = 1) +
geom_abline(intercept = 0, slope = 1,
size = 1, color = "red")
# Correlate the above two values
ggplot() +
geom_point(aes(x = q.theoretical,
y = q.observed), size = 1) +
geom_abline(intercept = 0, slope = 1,
size = 1, color = "red")
pbinom(6, size=10,
prob=0.5,
lower.tail=FALSE)
# size of the sample
N = 8
#
# we now draw 100 times samples of size N=8
X = lapply(1:100,function(i) {rpois(N,lambda = lambda)})
lambda = 75
# size of the sample
N = 8
#
# we now draw 100 times samples of size N=8
X = lapply(1:100,function(i) {rpois(N,lambda = lambda)})
View(X)
View(X)
View(X)
lapply(X, mean)
lapply(X, function(i) mean)
lapply(X, function(i){ mean })
lapply(X, function(i){ mean(i) })
df = N-1
tc = qt(c(0.975),df) # this is the critical value for the t-distribution for df = N-1 degrees of freedom and 95% CI
Xl = Xm-tc*Xsd/sqrt(N) # upper bound of the 95% CI
# we compute the sample means
Xm = sapply(X,mean)
# and the sample standard deviations
Xsd = sapply(X,sd)
df = N-1
tc = qt(c(0.975),df) # this is the critical value for the t-distribution for df = N-1 degrees of freedom and 95% CI
Xl = Xm-tc*Xsd/sqrt(N) # upper bound of the 95% CI
Xh = Xm+tc*Xsd/sqrt(N) # lower bound of the 95% CI
col = c('red','blue')
## vector of TRUE/FALSE if the real expectation value lambda is inside the interval
i.ok =  as.factor(Xl < lambda & Xh > lambda)
## plot the mean values and the confidence interval
plot(Xm,ylim=c(50,100),pch=20,ylab="",main=paste("Mean values and confidence intervals,N=",N));abline(h=lambda,lty=3);lapply(1:length(Xl),function(i) {points(c(i,i),c(Xl[i],Xh[i]),type="l",col=col[i.ok[i]],lwd=2)})
# Combine data into a data frame
plot_data <- data.frame(
Xm = Xm,
Xl = Xl,
Xh = Xh,
i.ok = i.ok
)
# Plot using ggplot2
ggplot(plot_data, aes(x = factor(row_number()), y = Xm)) +
geom_point(aes(color = i.ok), size = 3) +
geom_errorbar(aes(ymin = Xl, ymax = Xh, color = i.ok), width = 0.2) +
geom_hline(yintercept = lambda, linetype = "dashed", color = "black") +
scale_color_manual(values = c("red", "blue"), breaks = c("TRUE", "FALSE")) +
labs(title = paste("Mean values and confidence intervals, N =", N),
y = "Mean values",
color = "95% CI Status") +
theme_minimal()
View(plot_data)
# Plot using ggplot2
ggplot(plot_data,
aes(x = factor(row_number()), y = Xm)) +
geom_point(aes(color = `i.ok`), size = 3) +
geom_errorbar(aes(ymin = Xl, ymax = Xh, color = i.ok), width = 0.2) +
geom_hline(yintercept = lambda, linetype = "dashed", color = "black") +
scale_color_manual(values = c("red", "blue"), breaks = c("TRUE", "FALSE")) +
labs(title = paste("Mean values and confidence intervals, N =", N),
y = "Mean values",
color = "95% CI Status") +
theme_minimal()
# Plot using ggplot2
ggplot(plot_data,
aes(x = factor(row_number()), y = Xm,
color = `i.ok`)) +
geom_point(aes(), size = 3) +
geom_errorbar(aes(ymin = Xl, ymax = Xh, color = i.ok), width = 0.2) +
geom_hline(yintercept = lambda, linetype = "dashed", color = "black") +
scale_color_manual(values = c("red", "blue"), breaks = c("TRUE", "FALSE")) +
labs(title = paste("Mean values and confidence intervals, N =", N),
y = "Mean values",
color = "95% CI Status") +
theme_minimal()
# Plot using ggplot2
ggplot(plot_data,
aes(x = factor(row_number()), y = Xm,
color = `i.ok`)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = Xl, ymax = Xh, color = i.ok), width = 0.2) +
geom_hline(yintercept = lambda, linetype = "dashed", color = "black") +
scale_color_manual(values = c("red", "blue"), breaks = c("TRUE", "FALSE")) +
labs(title = paste("Mean values and confidence intervals, N =", N),
y = "Mean values",
color = "95% CI Status") +
theme_minimal()
View(plot_data)
View(plot_data)
# Combine data into a data frame
plot_data <- data.frame(
n = 1:100,
Xm = Xm,
Xl = Xl,
Xh = Xh,
i.ok = i.ok
)
# Combine data into a data frame
plot_data <- data.frame(
n = 1:100,
Xm = Xm,
Xl = Xl,
Xh = Xh,
i.ok = i.ok
)
# Plot using ggplot2
ggplot(plot_data,
aes(x = n, y = Xm,
color = `i.ok`)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = Xl, ymax = Xh, color = i.ok), width = 0.2) +
geom_hline(yintercept = lambda, linetype = "dashed", color = "black") +
scale_color_manual(values = c("red", "blue"), breaks = c("TRUE", "FALSE")) +
labs(title = paste("Mean values and confidence intervals, N =", N),
y = "Mean values",
color = "95% CI Status") +
theme_minimal()
# Plot using ggplot2
ggplot(plot_data,
aes(x = n, y = Xm,
color = `i.ok`)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = Xl, ymax = Xh, color = i.ok), width = 0.2) +
geom_hline(yintercept = lambda, linetype = "dashed", color = "black") +
scale_color_manual(values = c("red", "blue")) +
labs(title = paste("Mean values and confidence intervals, N =", N),
y = "Mean values",
color = "95% CI Status")
# Plot using ggplot2
ggplot(plot_data,
aes(x = n, y = Xm,
color = `i.ok`)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = Xl, ymax = Xh, color = i.ok), width = 0.2) +
geom_hline(yintercept = lambda, linetype = "dashed", color = "black") +
scale_color_manual(values = c("red", "blue")) +
labs(y = "Mean values",
color = "95% CI Status")
## vector of TRUE/FALSE if the real expectation value lambda is inside the interval
i.ok =  as.factor(Xl < lambda & Xh > lambda)
plot_data <- data.frame(
n = 1:100,
Xm = Xm,
Xl = Xl,
Xh = Xh,
i.ok = i.ok
)
# Plot using ggplot2
ggplot(plot_data,
aes(x = n, y = Xm,
color = `i.ok`)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = Xl, ymax = Xh, color = i.ok), width = 0.2) +
geom_hline(yintercept = lambda, linetype = "dashed", color = "black") +
scale_color_manual(values = c("red", "blue")) +
labs(y = "Mean values",
color = "95% CI Status")
## vector of TRUE/FALSE if the real expectation value lambda is inside the interval
i.ok =  as.factor(Xl < lambda & Xh > lambda)
plot_data <- data.frame(
n = 1:100,
Xm = Xm,
Xl = Xl,
Xh = Xh,
i.ok = i.ok
)
# Plot using ggplot2
ggplot(plot_data,
aes(x = n, y = Xm,
color = `i.ok`)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = Xl, ymax = Xh, color = i.ok), width = 0.2) +
geom_hline(yintercept = lambda, linetype = "dashed", color = "black") +
scale_color_manual(values = c("red", "blue")) +
labs(y = "Mean values",
color = "95% CI Status")
## vector of TRUE/FALSE if the real expectation value lambda is inside the interval
i.ok =  as.factor(Xl < lambda & Xh > lambda)
plot_data <- data.frame(
n = 1:100,
Xm = Xm,
Xl = Xl,
Xh = Xh,
i.ok = i.ok
)
# Plot using ggplot2
ggplot(plot_data,
aes(x = n, y = Xm,
color = `i.ok`)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = Xl, ymax = Xh, color = i.ok), width = 0.2) +
geom_hline(yintercept = lambda, linetype = "dashed", color = "black") +
scale_color_manual(values = c("red", "green")) +
labs(y = "Mean values",
color = "95% CI Status")
# Plot using ggplot2
ggplot(plot_data,
aes(x = n, y = Xm,
color = `i.ok`)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = Xl, ymax = Xh, color = i.ok), width = 0.2) +
geom_hline(yintercept = lambda, linetype = "dashed", color = "black") +
scale_color_manual(values = c("red", "sienna")) +
labs(y = "Mean values",
color = "95% CI Status")
# Plot using ggplot2
ggplot(plot_data,
aes(x = n, y = Xm,
color = `i.ok`)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = Xl, ymax = Xh, color = i.ok), width = 0.2) +
geom_hline(yintercept = lambda, linetype = "dashed", color = "black") +
scale_color_manual(values = c("red", "paleturquoise")) +
labs(y = "Mean values",
color = "95% CI Status")
# Plot using ggplot2
ggplot(plot_data,
aes(x = n, y = Xm,
color = `i.ok`)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = Xl, ymax = Xh, color = i.ok), width = 0.2) +
geom_hline(yintercept = lambda, linetype = "dashed", color = "black") +
scale_color_manual(values = c("red", "orange")) +
labs(y = "Mean values",
color = "95% CI Status")
# Plot using ggplot2
ggplot(plot_data,
aes(x = n, y = Xm,
color = `i.ok`)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = Xl, ymax = Xh, color = i.ok), width = 0.2) +
geom_hline(yintercept = lambda, linetype = "dashed", color = "black") +
scale_color_manual(values = c("grey", "orange")) +
labs(y = "Mean values",
color = "95% CI Status")
## plot the mean values and the confidence interval
plot(Xm,ylim=c(50,100),pch=20,ylab="",main=paste("Mean values and confidence intervals,N=",N));abline(h=lambda,lty=3);lapply(1:length(Xl),function(i) {points(c(i,i),c(Xl[i],Xh[i]),type="l",col=col[i.ok[i]],lwd=2)})
# Plot using ggplot2
ggplot(plot_data,
aes(x = n, y = Xm,
color = `i.ok`)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = Xl, ymax = Xh, color = i.ok), width = 0.2) +
geom_hline(yintercept = lambda, linetype = "dashed", color = "black") +
scale_color_manual(values = c("grey", "orange")) +
labs(y = "Mean values",
title = paste("Mean values and confidence intervals,N=",N),
color = "95% CI Status")
