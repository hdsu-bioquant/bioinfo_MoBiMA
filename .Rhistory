n.test = nrow(dat.test)
residuals = dat.test$chol - pred
rmse.test = sqrt(1/n.test*sum(residuals^2))
RMSE <- c(rmse.train,rmse.test)
RMSE
})
set.seed(345)
RMSE <- sapply(1:10, function(x) {
i.train = sample (1:nrow(dat),100)
##
dat.train = dat[i.train,]
dat.test = dat[-i.train,]
##
l.train = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat.train)
##
n.train = nrow(dat.train)
rmse.train = sqrt(1/n.train*sum(l.train$residuals^2))
##
pred = predict(l.train,newdata = dat.test)
##
n.test = nrow(dat.test)
residuals = dat.test$chol - pred
rmse.test = sqrt(1/n.test*sum(residuals^2))
RMSE <- c(rmse.train,rmse.test)
RMSE
})
#
#
plot(RMSE[1,], pch = 19, col = "orange", xlab = "Iteration", ylab = "RMSE values", ylim = c(min(RMSE),max(RMSE)+2));points(RMSE[2,], pch = 19, col = "purple");legend("topright", legend = c("rmse.train", "rmse.test"), col = c("orange","purple"), pch = c(19,19));abline(h = mean(RMSE[1,]), lty = 2, col = "orange");abline(h = mean(RMSE[2,]), lty = 2, col = "purple")
RMSE
ggplot(as.data.frame(RMSE))
as.data.frame(RMSE)
plot(RMSE[1,], pch = 19, col = "orange", xlab = "Iteration", ylab = "RMSE values", ylim = c(min(RMSE),max(RMSE)+2));points(RMSE[2,], pch = 19, col = "purple");legend("topright", legend = c("rmse.train", "rmse.test"), col = c("orange","purple"), pch = c(19,19));abline(h = mean(RMSE[1,]), lty = 2, col = "orange");abline(h = mean(RMSE[2,]), lty = 2, col = "purple")
RMSE[1,]
ggplot() +
geom_point(aes(y = RMSE[1,],
x = 1:10))
ggplot() +
geom_point(aes(y = RMSE[1,],
x = 1:10), colour = "orange") +
ylim(min(RMSE), max(RMSE +2))
ggplot() +
geom_point(aes(y = RMSE[1,],
x = 1:10), colour = "orange") +
ylim(min(RMSE), max(RMSE +2)) +
geom_point(aes(y = RMSE[2,],
x = 1:10), colour = "purple") +
plot(RMSE[1,], pch = 19, col = "orange", xlab = "Iteration", ylab = "RMSE values", ylim = c(min(RMSE),max(RMSE)+2));points(RMSE[2,], pch = 19, col = "purple");legend("topright", legend = c("rmse.train", "rmse.test"), col = c("orange","purple"), pch = c(19,19));abline(h = mean(RMSE[1,]), lty = 2, col = "orange");abline(h = mean(RMSE[2,]), lty = 2, col = "purple")
ggplot() +
geom_point(aes(y = RMSE[1,],
x = 1:10), colour = "orange") +
ylim(min(RMSE), max(RMSE +2)) +
geom_point(aes(y = RMSE[2,],
x = 1:10), colour = "purple")
ggplot() +
geom_point(aes(y = RMSE[1,],
x = 1:10), colour = "orange") +
ylim(min(RMSE), max(RMSE +2)) +
geom_point(aes(y = RMSE[2,],
x = 1:10), colour = "purple") +
geom_hline(yintercept = mean(RMSE[1,]),
colour = "orange")
ggplot() +
geom_point(aes(y = RMSE[1,],
x = 1:10), colour = "orange") +
ylim(min(RMSE), max(RMSE +2)) +
geom_point(aes(y = RMSE[2,],
x = 1:10), colour = "purple") +
geom_hline(yintercept = mean(RMSE[1,]),
colour = "orange") +
geom_hline(yintercept = mean(RMSE[2,]),
colour = "purple")
ggplot() +
geom_point(aes(y = RMSE[1,],
x = 1:10), colour = "gold") +
ylim(min(RMSE), max(RMSE +2)) +
geom_point(aes(y = RMSE[2,],
x = 1:10), colour = "orangered") +
geom_hline(yintercept = mean(RMSE[1,]),
colour = "gold") +
geom_hline(yintercept = mean(RMSE[2,]),
colour = "orangered")
ggplot() +
geom_point(aes(y = RMSE[1,],
x = 1:10), colour = "gold") +
ylim(min(RMSE), max(RMSE +2)) +
geom_point(aes(y = RMSE[2,],
x = 1:10), colour = "steelblue") +
geom_hline(yintercept = mean(RMSE[1,]),
colour = "gold") +
geom_hline(yintercept = mean(RMSE[2,]),
colour = "steelblue")
ggplot() +
geom_point(aes(y = RMSE[1,],
x = 1:10), colour = "gold") +
ylim(min(RMSE), max(RMSE +2)) +
geom_point(aes(y = RMSE[2,],
x = 1:10), colour = "steelblue") +
geom_hline(yintercept = mean(RMSE[1,]),
colour = "gold") +
geom_hline(yintercept = mean(RMSE[2,]),
colour = "steelblue") +
labs(x = "Iteration", y = "RMSE values")
ggplot() +
geom_point(aes(y = RMSE[1,],
x = round(1:10, 1)), colour = "gold") +
ylim(min(RMSE), max(RMSE +2)) +
geom_point(aes(y = RMSE[2,],
x = 1:10), colour = "steelblue") +
geom_hline(yintercept = mean(RMSE[1,]),
colour = "gold") +
geom_hline(yintercept = mean(RMSE[2,]),
colour = "steelblue") +
labs(x = "Iteration", y = "RMSE values")
ggplot() +
geom_point(aes(y = RMSE[1,],
x = 1:10), colour = "gold") +
geom_point(aes(y = RMSE[2,],
x = 1:10), colour = "steelblue") +
scale_x_continuous(breaks=c(2,4,6,8,10)) +
geom_hline(yintercept = mean(RMSE[1,]),
colour = "gold") +
ylim(min(RMSE), max(RMSE +2)) +
geom_hline(yintercept = mean(RMSE[2,]),
colour = "steelblue") +
labs(x = "Iteration", y = "RMSE values")
set.seed(345)
RMSE <- sapply(1:10, function(x) {
i.train = sample (1:nrow(dat),100)
##
dat.train = dat[i.train,]
dat.test = dat[-i.train,]
##
l.train = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat.train)
##
n.train = nrow(dat.train)
rmse.train = sqrt(1/n.train*sum(l.train$residuals^2))
##
pred = predict(l.train,newdata = dat.test)
##
n.test = nrow(dat.test)
residuals = dat.test$chol - pred
rmse.test = sqrt(1/n.test*sum(residuals^2))
RMSE <- c(rmse.train,rmse.test)
RMSE
})
#
ggplot() +
geom_point(aes(y = RMSE[1,],
x = 1:10), colour = "gold") +
geom_point(aes(y = RMSE[2,],
x = 1:10), colour = "steelblue") +
scale_x_continuous(breaks=c(2,4,6,8,10)) +
geom_hline(yintercept = mean(RMSE[1,]),
colour = "gold") +
ylim(min(RMSE), max(RMSE +2)) +
geom_hline(yintercept = mean(RMSE[2,]),
colour = "steelblue") +
labs(x = "Iteration", y = "RMSE values")
set.seed(345)
RMSE <- sapply(1:10, function(x) {
i.train = sample (1:nrow(dat),100)
##
dat.train = dat[i.train,]
dat.test = dat[-i.train,]
##
l.train = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat.train)
##
n.train = nrow(dat.train)
rmse.train = sqrt(1/n.train*sum(l.train$residuals^2))
##
pred = predict(l.train,newdata = dat.test)
##
n.test = nrow(dat.test)
residuals = dat.test$chol - pred
rmse.test = sqrt(1/n.test*sum(residuals^2))
RMSE <- c(rmse.train,rmse.test)
RMSE
})
#
ggplot() +
geom_point(aes(y = RMSE[1,],
x = 1:10), colour = "gold") +
geom_point(aes(y = RMSE[2,],
x = 1:10), colour = "steelblue") +
scale_x_continuous(breaks=c(2,4,6,8,10)) +
geom_hline(yintercept = mean(RMSE[1,]),
colour = "gold") +
ylim(min(RMSE), max(RMSE +2)) +
geom_hline(yintercept = mean(RMSE[2,]),
colour = "steelblue") +
scale_colour_manual(values =c('gold'='gold','steelblue'='steelblue'),
labels = c('RMSE (train)','RMSE (test)')) +
labs(x = "Iteration", y = "RMSE values")
set.seed(345)
RMSE <- sapply(1:10, function(x) {
i.train = sample (1:nrow(dat),100)
##
dat.train = dat[i.train,]
dat.test = dat[-i.train,]
##
l.train = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat.train)
##
n.train = nrow(dat.train)
rmse.train = sqrt(1/n.train*sum(l.train$residuals^2))
##
pred = predict(l.train,newdata = dat.test)
##
n.test = nrow(dat.test)
residuals = dat.test$chol - pred
rmse.test = sqrt(1/n.test*sum(residuals^2))
RMSE <- c(rmse.train,rmse.test)
RMSE
})
#
ggplot() +
geom_point(aes(y = RMSE[1,],
x = 1:10), colour = "gold") +
geom_point(aes(y = RMSE[2,],
x = 1:10), colour = "steelblue") +
scale_x_continuous(breaks=c(2,4,6,8,10)) +
geom_hline(yintercept = mean(RMSE[1,]),
colour = "gold") +
ylim(min(RMSE), max(RMSE +2)) +
geom_hline(yintercept = mean(RMSE[2,]),
colour = "steelblue") +
scale_colour_manual(name = "X",
values =c('gold'='gold','steelblue'='steelblue'),
labels = c('RMSE (train)','RMSE (test)')) +
labs(x = "Iteration", y = "RMSE values")
ggplot() +
geom_point(aes(y = RMSE[1,],
x = 1:10), colour = "gold") +
geom_point(aes(y = RMSE[2,],
x = 1:10), colour = "steelblue") +
scale_x_continuous(breaks=c(2,4,6,8,10)) +
geom_hline(yintercept = mean(RMSE[1,]),
colour = "gold") +
ylim(min(RMSE), max(RMSE +2)) +
geom_hline(yintercept = mean(RMSE[2,]),
colour = "steelblue") +
scale_colour_manual(name = "X", guide = 'legend',
values =c('gold'='gold','steelblue'='steelblue'),
labels = c('RMSE (train)','RMSE (test)')) +
labs(x = "Iteration", y = "RMSE values")
ggplot() +
geom_point(aes(y = RMSE[1,],
x = 1:10), colour = "gold") +
geom_point(aes(y = RMSE[2,],
x = 1:10), colour = "steelblue") +
scale_x_continuous(breaks=c(2,4,6,8,10)) +
geom_hline(yintercept = mean(RMSE[1,]),
colour = "gold") +
ylim(min(RMSE), max(RMSE +2)) +
geom_hline(yintercept = mean(RMSE[2,]),
colour = "steelblue") +
scale_colour_manual(name = "X", guide = 'legend',
values =c('gold','steelblue'),
labels = c('RMSE (train)','RMSE (test)')) +
labs(x = "Iteration", y = "RMSE values")
ggplot() +
geom_point(aes(y = RMSE[1,],
x = 1:10, colour = "gold")) +
geom_point(aes(y = RMSE[2,],
x = 1:10, colour = "steelblue")) +
scale_x_continuous(breaks=c(2,4,6,8,10)) +
geom_hline(yintercept = mean(RMSE[1,]),
colour = "gold") +
ylim(min(RMSE), max(RMSE +2)) +
geom_hline(yintercept = mean(RMSE[2,]),
colour = "steelblue") +
scale_colour_manual(name = "X", guide = 'legend',
values =c('gold'='gold','steelblue'='steelblue'),
labels = c('RMSE (train)','RMSE (test)')) +
labs(x = "Iteration", y = "RMSE values")
set.seed(345)
RMSE <- sapply(1:10, function(x) {
i.train = sample (1:nrow(dat),100)
##
dat.train = dat[i.train,]
dat.test = dat[-i.train,]
##
l.train = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat.train)
##
n.train = nrow(dat.train)
rmse.train = sqrt(1/n.train*sum(l.train$residuals^2))
##
pred = predict(l.train,newdata = dat.test)
##
n.test = nrow(dat.test)
residuals = dat.test$chol - pred
rmse.test = sqrt(1/n.test*sum(residuals^2))
RMSE <- c(rmse.train,rmse.test)
RMSE
})
#
ggplot() +
geom_point(aes(y = RMSE[1,],
x = 1:10, colour = "gold")) +
geom_point(aes(y = RMSE[2,],
x = 1:10, colour = "steelblue")) +
scale_x_continuous(breaks=c(2,4,6,8,10)) +
geom_hline(yintercept = mean(RMSE[1,]),
colour = "gold") +
ylim(min(RMSE), max(RMSE +2)) +
geom_hline(yintercept = mean(RMSE[2,]),
colour = "steelblue") +
scale_colour_manual(name = "RMSE", guide = 'legend',
values =c('gold'='gold','steelblue'='steelblue'),
labels = c('train','test')) +
labs(x = "Iteration", y = "RMSE values")
glimpse(msleep)
data(msleep)
data(msleep)
View(msleep)
data("diamonds")
force(diamonds)
View(diamonds)
data("HairEyeColor")
force(HairEyeColor)
data("Puromycin")
force(Puromycin)
View(Puromycin)
data("lynx")
force(lynx)
data("quakes")
force(quakes)
View(quakes)
cat.weights <- data.frame(CatName=c('Muffin', 'Lily', 'Mittens', 'Oreo', 'Fluffy', 'Loki'),
month0=c(4.3, 4.5, 5, 4.4, 3.8, 4.9),
month1=c(4.4, 4.5, 4.9, 4.3, 3.9, 5))
View(cat.weights)
cat.weights <- data.frame(CatName=c('Muffin', 'Lily', 'Mittens', 'Oreo', 'Loki', 'Fluffy', ''),
month0=c(4.3, 4.5, 5, 4.4, 3.8, 5.5, 4.5),
month1=c(4.4, 4.5, 4.9, 4.3, 3.9, 5.4, 4.6))
cat.weights <- data.frame(CatName=c('Muffin', 'Lily', 'Mittens', 'Oreo', 'Loki', 'Fluffy', 'Honey'),
month0=c(4.3, 4.5, 5, 4.4, 3.8, 5.5, 4.5),
month1=c(4.4, 4.5, 4.9, 4.3, 3.9, 5.4, 4.6))
View(cat.weights)
msleep %>%
filter(genus == "Sus")
cat.weights %>%
gather(CatName, Weight, Time)
library(tidyr)
cat.weights %>%
gather(CatName, Weight, Time)
cat.weights %>%
gather(Weight, Time, month0:month1)
cat.weights %>%
gather(Time, Weight, month0:month1)
cat.weights %>%
gather(key = Time,
value = Weight, month0:month1)
library(tidyr)
cat.weights %>%
gather(key = Time,
value = Weight, month0:month1)
library(tidyr)
cat.weights %>%
gather(key = Time, # column name given to the gathered column names
value = Weight, # column name will be given to the values
month0:month1) # columns to gather
cat.weights
rand.numbers = sample(10, 1:100)
rand.numbers = sample(10, 1:100)
rand.numbers = sample(size = 10, 1:100)
rand.numbers = sample(size = 100, 1:1000)
rand.numbers = sample(size = 100, 1:100)
ggplot() +    # column to use for y-axis
geom_histogram(aes(x = rand.numbers))                # plot layer for histogram
rand.numbers = sample(size = 100, x = 1:100)
ggplot() +    # column to use for y-axis
geom_histogram(aes(x = rand.numbers))                # plot layer for histogram
rand.numbers = rnorm(100)
rand.numbers = rnorm(100)
ggplot() +    # column to use for y-axis
geom_histogram(aes(x = rand.numbers))                # plot layer for histogram
ggplot(aes(x = rand.numbers)) +
geom_histogram() # plot layer for histogram
ggplot() +
geom_histogram(aes(x = rand.numbers)) # aes goes in the plot layer for histogram
ggplot() +
geom_histogram(aes(x = rand.numbers),
bins = 50) # aes goes in the plot layer for histogram
ggplot(msleep,
aes(x = vore,
y = sleep_total)) +
geom_boxplot()
summary(msleep)
View(msleep)
ggplot(msleep,
aes(x = order,
y = sleep_total)) +
geom_boxplot()
ggplot(msleep,
aes(x = vore,
y = sleep_total)) +
geom_boxplot()
ggplot(na.omit(msleep),
aes(x = vore,
y = sleep_total)) +
geom_boxplot()
pivot_longer()
library(wesanderson)
ggplot(msleep,
aes(x = bodywt,            # column to use for x-axis
y = sleep_total,       # column to use for y-axis
colour = vore)) +
geom_point()
ggplot(msleep,
aes(x = bodywt,            # column to use for x-axis
y = sleep_total,       # column to use for y-axis
colour = vore)) +
geom_point()
ggplot(msleep,
aes(x = log(bodywt),            # column to use for x-axis
y = sleep_total,            # column to use for y-axis
colour = vore)) +           # column used for colour
geom_point()
ggplot(na.omit(msleep),
aes(x = log(bodywt),            # column to use for x-axis
y = sleep_total,            # column to use for y-axis
colour = vore)) +           # column used for colour
geom_point()
ggplot(msleep,
aes(x = log(bodywt),            # column to use for x-axis
y = sleep_total,            # column to use for y-axis
colour = vore)) +           # column used for colour
geom_point()
ggplot(msleep, # we use na.omit here to hide NAs from the plot
aes(x = vore,
y = sleep_total)) +
geom_boxplot()
ggplot(msleep,
aes(x = log(bodywt),            # column to use for x-axis
y = sleep_total,            # column to use for y-axis
colour = vore)) +           # column used for colour
geom_point()
stat_mean()
??stat_mean
library(virids)
library(viridis)
ggplot(aes(x = rand.numbers)) +
geom_histogram(,  # aes goes in the plot layer for histogram
bins = 50)
#First, we build the matrix
m <- rnorm(30)   # generate 30 random numbers for the matrix
Mat <- matrix(data = m, nrow = 6)
Mat
#Next, we want to determine the minimum value of each row:
apply(Mat, 1, min)
x <- c(1:5)
sapply(x, sqrt)
# sapply()
z <- c(1:5)
sapply(z, function(x) {x*2})
# apply()
Mat
apply(Mat, 1, function(x) {sum(x*2)}) #the operation is performed on every row of "Mat"; every element is multiplied by two and the sum of the row is calculated
List1 <- list(color = c("blue", "red"), size = 5, state = c(TRUE, FALSE, TRUE, TRUE))
sapply(List1, length)
lapply(List1, length)
x <- c("a", "b", "c")
for (i in x) {
print(i)
}
#or
for (i in 1:4) {
print(i*3)
}
a <- 5
b <- 10
if (a < b) {
print("a is smaller than b")
}
a <- 10
b <- 10
if (a < b) {
print("a is smaller than b")
} else if (a == b) {
print("a is equal to b")
}
a <- 10
b <- 5
if (a < b) {
print("a is smaller than b")
} else if (a == b) {
print("a is equal to b")
} else {
print("a is greater than b")
}
knitr::kable()
decision = c("", "Decision: Reject H0", "Decision: Do not reject H0")
h0_true = c("H0 is true", "Type I Error", "Correct Decision")
h0_false = c("H0 is false", "Correct Decision", "Type II Error")
knitr::kable(data.frame(decision,
h0_true,
h0_false))
decision = c("Decision: Reject H0", "Decision: Do not reject H0")
h0_true = c("Type I Error", "Correct Decision")
h0_false = c("Correct Decision", "Type II Error")
knitr::kable(data.frame(decision,
h0_true,
h0_false), col.names = c("", "H0 is true", "H0 is false") )
knitr::kable(
head(pressure, 10), caption = 'Here is a nice table!',
booktabs = TRUE
)
knitr::kable(
head(pressure, 5), caption = 'Here is a nice table!',
booktabs = TRUE
)
